(window.webpackJsonp=window.webpackJsonp||[]).push([[86],{1170:function(s,t,a){s.exports=a.p+"assets/img/image-20210917002203414.a6c5aafe.png"},1171:function(s,t,a){s.exports=a.p+"assets/img/image-20210917003456128.05114034.png"},1601:function(s,t,a){"use strict";a.r(t);var n=a(11),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,n=s._self._c||t;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h1",{attrs:{id:"typescript-高级类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#typescript-高级类型"}},[s._v("#")]),s._v(" TypeScript 高级类型")]),s._v(" "),n("p",[s._v("TS 中的高级类型有很多，重点学习以下高级类型：")]),s._v(" "),n("ol",[n("li",[s._v("泛型 和 keyof")]),s._v(" "),n("li",[s._v("索引签名类型 和 索引查询类型")]),s._v(" "),n("li",[s._v("映射类型")])]),s._v(" "),n("h2",{attrs:{id:"泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[s._v("#")]),s._v(" 泛型")]),s._v(" "),n("ul",[n("li",[n("strong",[s._v("泛型是可以在保证类型安全前提下，让函数等与多种类型一起工作，从而实现复用")]),s._v("，常用于：函数、接口、class 中")]),s._v(" "),n("li",[s._v("需求：创建一个 id 函数，传入什么数据就返回该数据本身(也就是说，参数和返回值类型相同)")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("比如，id(10) 调用以上函数就会直接返回 10 本身。但是，该函数只接收数值类型，无法用于其他类型")]),s._v(" "),n("li",[s._v("为了能让函数能够接受任意类型，可以将参数类型修改为 any。但是，这样就失去了 TS 的类型保护，类型不安全")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("any")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[n("strong",[s._v("泛型在保证类型安全(不丢失类型信息)的同时，可以让函数等与多种不同的类型一起工作，灵活可复用")])]),s._v(" "),n("li",[s._v("实际上，在 C# 和 Java 等编程语言中，泛型都是用来实现可复用组件功能的主要工具之一")])]),s._v(" "),n("h3",{attrs:{id:"创建泛型函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#创建泛型函数"}},[s._v("#")]),s._v(" 创建泛型函数")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("语法：在函数名称的后面添加 "),n("code",[s._v("<>")]),s._v("(尖括号)，"),n("strong",[s._v("尖括号中添加类型变量")]),s._v("，比如此处的 Type")]),s._v(" "),n("li",[n("strong",[s._v("类型变量 Type，是一种特殊类型的变量，它处理类型而不是值")])]),s._v(" "),n("li",[n("strong",[s._v("该类型变量相当于一个类型容器")]),s._v("，能够捕获用户提供的类型(具体是什么类型由用户调用该函数时指定)")]),s._v(" "),n("li",[s._v("因为 Type 是类型，因此可以将其作为函数参数和返回值的类型，表示参数和返回值具有相同的类型")]),s._v(" "),n("li",[s._v("类型变量 Type，可以是任意合法的变量名称")])])])]),s._v(" "),n("h3",{attrs:{id:"调用泛型函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#调用泛型函数"}},[s._v("#")]),s._v(" 调用泛型函数")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("ul",[n("li",[n("p",[s._v("解释：")]),s._v(" "),n("ol",[n("li",[s._v("语法：在函数名称的后面添加 "),n("code",[s._v("<>")]),s._v("(尖括号)，"),n("strong",[s._v("尖括号中指定具体的类型")]),s._v("，比如，此处的 number")]),s._v(" "),n("li",[s._v("当传入类型 number 后，这个类型就会被函数声明时指定的类型变量 Type 捕获到")]),s._v(" "),n("li",[s._v("此时，Type 的类型就是 number，所以，函数 id 参数和返回值的类型也都是 number")])])]),s._v(" "),n("li",[n("p",[s._v("同样，如果传入类型 string，函数 id 参数和返回值的类型就都是 string")])]),s._v(" "),n("li",[n("p",[s._v("这样，通过泛型就做到了让 id 函数与多种不同的类型一起工作，"),n("strong",[s._v("实现了复用的同时保证了类型安全")])])])]),s._v(" "),n("h3",{attrs:{id:"简化泛型函数调用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简化泛型函数调用"}},[s._v("#")]),s._v(" 简化泛型函数调用")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 省略 <number> 调用函数")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" num "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" str "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("ul",[n("li",[n("p",[s._v("解释:")]),s._v(" "),n("ol",[n("li",[s._v("在调用泛型函数时，"),n("strong",[s._v("可以省略 "),n("code",[s._v("<类型>")]),s._v(" 来简化泛型函数的调用")])]),s._v(" "),n("li",[s._v("此时，TS 内部会采用一种叫做"),n("strong",[s._v("类型参数推断")]),s._v("的机制，来根据传入的实参自动推断出类型变量 Type 的类型")]),s._v(" "),n("li",[s._v("比如，传入实参 10，TS 会自动推断出变量 num 的类型 number，并作为 Type 的类型")])])]),s._v(" "),n("li",[n("p",[s._v("推荐：使用这种简化的方式调用泛型函数，使代码更短，更易于阅读")])]),s._v(" "),n("li",[n("p",[s._v("说明："),n("strong",[s._v("当编译器无法推断类型或者推断的类型不准确时，就需要显式地传入类型参数")])])])]),s._v(" "),n("h3",{attrs:{id:"泛型约束"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型约束"}},[s._v("#")]),s._v(" 泛型约束")]),s._v(" "),n("ul",[n("li",[s._v("默认情况下，泛型函数的类型变量 Type 可以代表多个类型，这导致无法访问任何属性")]),s._v(" "),n("li",[s._v("比如，id('a') 调用函数时获取参数的长度：")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释：Type 可以代表任意类型，无法保证一定存在 length 属性，比如 number 类型就没有 length")]),s._v(" "),n("li",[s._v("此时，就需要"),n("strong",[s._v("为泛型添加约束来"),n("code",[s._v("收缩类型")]),s._v("(缩窄类型取值范围)")])]),s._v(" "),n("li",[s._v("添加泛型约束收缩类型，主要有以下两种方式：1 指定更加具体的类型  2 添加约束")])]),s._v(" "),n("h4",{attrs:{id:"指定更加具体的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#指定更加具体的类型"}},[s._v("#")]),s._v(" 指定更加具体的类型")]),s._v(" "),n("p",[s._v("比如，将类型修改为 "),n("code",[s._v("Type[]")]),s._v("(Type 类型的数组)，因为只要是数组就一定存在 length 属性，因此就可以访问了")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("h4",{attrs:{id:"添加约束"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#添加约束"}},[s._v("#")]),s._v(" 添加约束")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 创建一个接口")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ILength")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" length"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Type extends ILength 添加泛型约束")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 解释：表示传入的 类型 必须满足 ILength 接口的要求才行，也就是得有一个 number 类型的 length 属性")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" ILength"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("创建描述约束的接口 ILength，该接口要求提供 length 属性")]),s._v(" "),n("li",[s._v("通过 "),n("code",[s._v("extends")]),s._v(" 关键字使用该接口，为泛型(类型变量)添加约束")]),s._v(" "),n("li",[s._v("该约束表示："),n("strong",[s._v("传入的类型必须具有 length 属性")])])])]),s._v(" "),n("li",[s._v("注意:传入的实参(比如，数组)只要有 length 属性即可（类型兼容性)")])]),s._v(" "),n("h3",{attrs:{id:"多个类型变量"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多个类型变量"}},[s._v("#")]),s._v(" 多个类型变量")]),s._v(" "),n("p",[s._v("泛型的类型变量可以有多个，并且"),n("strong",[s._v("类型变量之间还可以约束")]),s._v("(比如，第二个类型变量受第一个类型变量约束)\n比如，创建一个函数来获取对象中属性的值：")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProp")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("keyof")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" person "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" name"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'jack'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" age"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("18")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProp")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("person"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'name'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("添加了第二个类型变量 Key，两个类型变量之间使用 "),n("code",[s._v(",")]),s._v(" 逗号分隔。")]),s._v(" "),n("li",[n("strong",[s._v("keyof 关键字接收一个对象类型，生成其键名称(可能是字符串或数字)的联合类型")]),s._v("。")]),s._v(" "),n("li",[s._v("本示例中 "),n("code",[s._v("keyof Type")]),s._v(" 实际上获取的是 person 对象所有键的联合类型，也就是："),n("code",[s._v("'name' | 'age'")])]),s._v(" "),n("li",[s._v("类型变量 Key 受 Type 约束，可以理解为：Key 只能是 Type 所有键中的任意一个，或者说只能访问对象中存在的属性")])])])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Type extends object 表示： Type 应该是一个对象类型，如果不是 对象 类型，就会报错")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 如果要用到 对象 类型，应该用 object ，而不是 Object")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token generic-function"}},[n("span",{pre:!0,attrs:{class:"token function"}},[s._v("getProperty")]),n("span",{pre:!0,attrs:{class:"token generic class-name"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" Key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("keyof")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" key"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("hr"),s._v(" "),n("h3",{attrs:{id:"泛型接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型接口"}},[s._v("#")]),s._v(" 泛型接口")]),s._v(" "),n("p",[s._v("泛型接口：接口也可以配合泛型来使用，以增加其灵活性，增强其复用性")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("IdFunc"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Type"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" Type\n  "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("ids")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=>")]),s._v(" Type"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" IdFunc"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("value"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" value "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[s._v("ids")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("在接口名称的后面添加 "),n("code",[s._v("<类型变量>")]),s._v("，那么，这个接口就变成了泛型接口。")]),s._v(" "),n("li",[s._v("接口的类型变量，对接口中所有其他成员可见，也就是"),n("strong",[s._v("接口中所有成员都可以使用类型变量")]),s._v("。")]),s._v(" "),n("li",[s._v("使用泛型接口时，"),n("strong",[s._v("需要显式指定具体的类型")]),s._v("(比如，此处的 IdFunc"),n("nunber",[s._v(")。")])],1),s._v(" "),n("li",[s._v("此时，id 方法的参数和返回值类型都是 number;ids 方法的返回值类型是 number[]。")])])])]),s._v(" "),n("h4",{attrs:{id:"js-中的泛型接口"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#js-中的泛型接口"}},[s._v("#")]),s._v(" JS 中的泛型接口")]),s._v(" "),n("p",[s._v("实际上，JS 中的数组在 TS 中就是一个泛型接口。")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" strs "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'c'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 鼠标放在 forEach 上查看类型")]),s._v("\nstrs"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("forEach\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" nums "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 鼠标放在 forEach 上查看类型")]),s._v("\nnums"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("forEach\n")])])]),n("p",[n("img",{attrs:{src:a(1170),alt:"image-20210917002203414"}})]),s._v(" "),n("ul",[n("li",[s._v("解释:当我们在使用数组时，TS 会根据数组的不同类型，来自动将类型变量设置为相应的类型")]),s._v(" "),n("li",[s._v("技巧:可以通过 Ctrl + 鼠标左键(Mac：Command + 鼠标左键)来查看具体的类型信息")])]),s._v(" "),n("h3",{attrs:{id:"泛型工具类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型工具类型"}},[s._v("#")]),s._v(" 泛型工具类型")]),s._v(" "),n("ul",[n("li",[s._v("泛型工具类型:TS 内置了一些常用的工具类型，来简化 TS 中的一些常见操作")]),s._v(" "),n("li",[s._v("说明:它们都是基于泛型实现的(泛型适用于多种类型，更加通用)，并且是内置的，可以直接在代码中使用。 这些工具类型有很多，主要学习以下几个:")])]),s._v(" "),n("ol",[n("li",[n("code",[s._v("Partial<Type>")])]),s._v(" "),n("li",[n("code",[s._v("Readonly<Type>")])]),s._v(" "),n("li",[n("code",[s._v("Pick<Type, Keys>")])]),s._v(" "),n("li",[n("code",[s._v("Omit<Type>")])])]),s._v(" "),n("h4",{attrs:{id:"partial"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#partial"}},[s._v("#")]),s._v(" Partial")]),s._v(" "),n("ul",[n("li",[s._v("Partial"),n("Type",[s._v(" 用来构造(创建)一个类型，将 Type 的所有属性设置为可选。")])],1)]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n  children"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PartialProps")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Partial"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Props"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:构造出来的新类型 PartialProps 结构和 Props 相同，但所有属性都变为可选的。")])]),s._v(" "),n("h4",{attrs:{id:"readonly"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#readonly"}},[s._v("#")]),s._v(" Readonly")]),s._v(" "),n("ul",[n("li",[s._v("Readonly"),n("Type",[s._v(" 用来构造一个类型，将 Type 的所有属性都设置为 readonly(只读)。")])],1)]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v("  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n  children"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("ReadonlyProps")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Readonly"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Props"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:构造出来的新类型 ReadonlyProps 结构和 Props 相同，但所有属性都变为只读的。")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" props"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" ReadonlyProps "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" children"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 错误演示")]),s._v("\nprops"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("id "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'2'")]),s._v("\n")])])]),n("ul",[n("li",[s._v('当我们想重新给 id 属性赋值时，就会报错:无法分配到 "id" ，因为它是只读属性。')])]),s._v(" "),n("h4",{attrs:{id:"pick"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#pick"}},[s._v("#")]),s._v(" Pick")]),s._v(" "),n("ul",[n("li",[s._v("Pick<Type, Keys> 从 Type 中选择一组属性来构造新类型。")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  id"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n  title"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),s._v("\n  children"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PickProps")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Pick"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'id'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'title'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("Pick 工具类型有两个类型变量:1 表示选择谁的属性 2 表示选择哪几个属性。 2. 其中第二个类型变量，如果只选择一个则只传入该属性名即可。")]),s._v(" "),n("li",[s._v("第二个类型变量传入的属性只能是第一个类型变量中存在的属性。")]),s._v(" "),n("li",[s._v("构造出来的新类型 PickProps，只有 id 和 title 两个属性类型。")])])])]),s._v(" "),n("h4",{attrs:{id:"omit"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#omit"}},[s._v("#")]),s._v(" Omit")]),s._v(" "),n("p",[s._v("Omit<K,T>类型让我们可以从另一个对象类型中剔除某些属性，并创建一个新的对象类型：")]),s._v(" "),n("p",[s._v("K：是对象类型名称，T：是剔除K类型中的属性名称")]),s._v(" "),n("p",[n("img",{attrs:{src:a(1171),alt:"image-20210917003456128"}})]),s._v(" "),n("h2",{attrs:{id:"索引签名类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引签名类型"}},[s._v("#")]),s._v(" 索引签名类型")]),s._v(" "),n("p",[s._v("绝大多数情况下，我们都可以在使用对象前就确定对象的结构，并为对象添加准确的类型。\n使用场景:"),n("strong",[s._v("当无法确定对象中有哪些属性")]),s._v("(或者说对象中可以出现任意多个属性)，此时，就用到"),n("strong",[s._v("索引签名类型")]),s._v("了。")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("AnyObject")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" AnyObject "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("使用 "),n("code",[s._v("[key: string]")]),s._v(" 来约束该接口中允许出现的属性名称。表示只要是 string 类型的属性名称，都可以出现在对象中。")]),s._v(" "),n("li",[s._v("这样，对象 obj 中就可以出现任意多个属性(比如，a、b 等)。")]),s._v(" "),n("li",[n("code",[s._v("key 只是一个占位符")]),s._v("，可以换成任意合法的变量名称。")]),s._v(" "),n("li",[s._v("隐藏的前置知识:"),n("code",[s._v("JS 中对象({})的键是 string 类型的")]),s._v("。")])])])]),s._v(" "),n("h3",{attrs:{id:"数组索引类型签名"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组索引类型签名"}},[s._v("#")]),s._v(" 数组索引类型签名")]),s._v(" "),n("ul",[n("li",[s._v("在 JS 中数组是一类特殊的对象，特殊在数组的键(索引)是数值类型")]),s._v(" "),n("li",[s._v("并且，数组也可以出现任意多个元素。所以，在数组对应的泛型接口中，也用到了索引签名类型。")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyArray"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" arr"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" MyArray"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("MyArray 接口模拟原生的数组接口，并使用 "),n("code",[s._v("[n: number]")]),s._v(" 来作为索引签名类型。")]),s._v(" "),n("li",[s._v("该索引签名类型表示:只要是 number 类型的键(索引)都可以出现在数组中，或者说数组中可以有任意多个元素。")]),s._v(" "),n("li",[s._v("同时也符合数组索引是 number 类型这一前提。")])])])]),s._v(" "),n("h2",{attrs:{id:"映射类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#映射类型"}},[s._v("#")]),s._v(" 映射类型")]),s._v(" "),n("ul",[n("li",[s._v("映射类型:"),n("strong",[s._v("基于旧类型创建新类型(对象类型")]),s._v(")，减少重复、提升开发效率。\n比如，类型 PropKeys 有 x/y/z，另一个类型 Type1 中也有 x/y/z，并且 Type1 中 x/y/z 的类型相同:")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PropKeys")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'y'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'z'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Type1")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" x"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" y"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" z"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("这样书写没错，但 x/y/z 重复书写了两次。像这种情况，就可以使用映射类型来进行简化。")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PropKeys")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'x'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'y'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'z'")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Type2")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("Key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" PropKeys"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("映射类型是基于索引签名类型的，所以，该语法类似于索引签名类型，也使用了 []。")]),s._v(" "),n("li",[n("code",[s._v("Key in PropKeys")]),s._v(" 表示 Key 可以是 PropKeys 联合类型中的任意一个，类似于 forin(let k in obj)。")]),s._v(" "),n("li",[s._v("使用映射类型创建的新对象类型 Type2 和类型 Type1 结构完全相同。")]),s._v(" "),n("li",[s._v("注意:"),n("strong",[s._v("映射类型只能在类型别名中使用，不能在接口中使用")]),s._v("。")])])])]),s._v(" "),n("h3",{attrs:{id:"根据对象创建"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#根据对象创建"}},[s._v("#")]),s._v(" 根据对象创建")]),s._v(" "),n("p",[s._v("映射类型除了根据联合类型创建新类型外，还可以根据对象类型来创建:")]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Type3")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("key "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("keyof")]),s._v(" Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[s._v("首先，先执行 "),n("code",[s._v("keyof Props")]),s._v(" 获取到对象类型 Props 中所有键的联合类型即，'a' | 'b' | 'c'。")]),s._v(" "),n("li",[s._v("然后，"),n("code",[s._v("Key in ...")]),s._v(" 就表示 Key 可以是 Props 中所有的键名称中的任意一个。")])])])]),s._v(" "),n("h3",{attrs:{id:"内置映射类型实现分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内置映射类型实现分析"}},[s._v("#")]),s._v(" 内置映射类型实现分析")]),s._v(" "),n("ul",[n("li",[s._v("实际上，前面讲到的"),n("strong",[s._v("泛型工具类型")]),s._v("(比如，Partial"),n("Type",[s._v(")都是基于映射类型实现的。")])],1),s._v(" "),n("li",[s._v("比如，Partial"),n("Type",[s._v(" 的实现:")])],1)]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Partial"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")])]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("P")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("in")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("keyof")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("?")]),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("T")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token constant"}},[s._v("P")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("PartialProps")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Partial"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("Props"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:\n"),n("ol",[n("li",[n("code",[s._v("keyof T")]),s._v(" 即 keyof Props 表示获取 Props 的所有键，也就是:'a' | 'b' | 'c'。")]),s._v(" "),n("li",[s._v("在 [] 后面添加 "),n("code",[s._v("?")]),s._v("(问号)，表示将这些属性变为"),n("code",[s._v("可选")]),s._v("的，以此来实现 Partial 的功能。")]),s._v(" "),n("li",[s._v("冒号后面的 "),n("code",[s._v("T[P] 表示获取 T 中每个键对应的类型")]),s._v("。比如，如果是 'a' 则类型是 number;如果是 'b' 则类型是 string。")]),s._v(" "),n("li",[s._v("最终，新类型 PartialProps 和旧类型 Props 结构完全相同，只是让所有类型都变为可选了。")])])])]),s._v(" "),n("h3",{attrs:{id:"索引访问类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#索引访问类型"}},[s._v("#")]),s._v(" 索引访问类型")]),s._v(" "),n("ul",[n("li",[s._v("刚刚用到的 "),n("code",[s._v("T[P]")]),s._v(" 语法，在 TS 中叫做"),n("code",[s._v("索引访问类型")])]),s._v(" "),n("li",[s._v("作用:"),n("strong",[s._v("用来查询属性的类型")]),s._v("。")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeA")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:"),n("code",[s._v("Props['a']")]),s._v(" 表示查询类型 Props 中属性 'a' 对应的类型 number。所以，TypeA 的类型为 number")]),s._v(" "),n("li",[s._v("注意:"),n("strong",[s._v("[] 中的属性必须存在于被查询类型中")]),s._v("，否则就会报错。")])]),s._v(" "),n("h4",{attrs:{id:"同时查询多个索引的类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#同时查询多个索引的类型"}},[s._v("#")]),s._v(" 同时查询多个索引的类型")]),s._v(" "),n("ul",[n("li",[s._v("索引查询类型的其他使用方式:同时查询多个索引的类型")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Props")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v(" a"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" b"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("string")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" c"),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("boolean")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeA")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'a'")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[s._v("'b'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// string | number")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:使用字符串字面量的联合类型，获取属性 a 和 b 对应的类型，结果为: string | number。")])]),s._v(" "),n("div",{staticClass:"language-ts extra-class"},[n("pre",{pre:!0,attrs:{class:"language-ts"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("type")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("TypeA")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("keyof")]),s._v(" Props"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// string | number | boolean")]),s._v("\n")])])]),n("ul",[n("li",[s._v("解释:使用 keyof 操作符获取 Props 中所有键对应的类型，结果为: string | number | boolean。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);